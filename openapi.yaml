openapi: 3.0.0
servers: []
info:
  description: This is a bot API to let bots battle
  version: "1.0.0"
  title: Bot Server API
  contact:
    email: szederjesiarnold@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: connect
    description: Connect to the game
  - name: play
    description: Play the game
paths:
  /hello:
    post:
      description: Initiate connection to the game
      tags: [connect]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelloRequest'
              
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
                
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
      callbacks:
        event:
          '{$request.body#/eventCallback}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: ["startGame", "roundFinished", "gameFinished"]
                        body:
                          oneOf:
                            - $ref: '#/components/schemas/StartGame'
                            - $ref: '#/components/schemas/RoundFinished'
                            - $ref: '#/components/schemas/GameFinished'
              responses:
                204:
                  description: No content
  /play:
    post:
      description: Play your "cards"
      tags: [play]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayRequest'
              
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayResponse'
                
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'    
      
components:
  schemas:
    HelloRequest:
      type: object
      properties:
        game:
          type: object
          properties:
            name:
              type: string
              example: rps
              enum: [rps]
            connectionToken:
              type: string
              description: Token to help players connect to the same game instance
            numberOfTotalPlayers:
              type: integer
              example: 2
          required: [name, connectionToken]
        playerName:
          type: string
          description: If name is not provided, server will assign a name
        eventCallback:
          type: string
          format: uri
          description: To receive notifications from server
      required: [game, eventCallback]
    PlayRequest:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
        playerId:
          type: string
          format: uuid
        round:
          type: integer
          example: 1
        move:
          type: object
          oneOf:
            - $ref: '#/components/schemas/RockPaperScissorsMove'
          description: Game specific
      required: [gameId, playerId, round, move]
    HelloResponse:
      type: object
      properties:
        gameId:
          type: string
        player: 
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        rounds:
          type: integer
          example: 5
          description: Number of rounds to play
      required: [gameId, player, rounds]
    PlayResponse:
      type: object
      properties:
        round:
          type: integer
        playersYetToMakeMove:
          type: array
          items:
            type: string
      required: [round, playersYetToMakeMove]
    StartGame:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
        players:
          type: array
          items:
            type: string
          example: [John, Jack]
        nextRound:
          type: integer
          example: 1
      required: [gameId, players, nextRound]
    RoundFinished:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
        currentRound:
          type: integer
          example: 3
        roundResult:
          type: object
          properties:
            status:
              type: string
              enum: [draw, win, lose]
              example: win
            winner:
              type: string
              example: Jack
            moves:
              type: object
              description: Map with key being player name and value being move
          required: [status]
        nextRound:
          type: integer
          example: 4
        score:
          type: string
          example: "1-2"
          description: Score after the current round
      required: [gameId, currentRound, roundResult, nextRound, score]
    GameFinished:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
        score:
          type: string
          example: "3-1"
        gameResult:
          type: object
          properties:
            status:
              type: string
              enum: [draw, win, lose]
              example: win
            winner:
              type: string
              example: Jack
      required: [gameId, score, gameResult]
    Error:
      type: object
      properties:
        message:
          type: string
    RockPaperScissorsMove:
      type: object
      properties:
        value:
          type: string
          enum: [rock, paper, scissors]