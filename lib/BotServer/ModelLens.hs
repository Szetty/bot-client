{-
   Bot Server API

   This is a bot API to let bots battle

   OpenAPI Version: 3.0.0
   Bot Server API API version: 1.0.0
   Contact: szederjesiarnold@gmail.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : BotServer.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module BotServer.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import BotServer.Model
import BotServer.Core


-- * Error

-- | 'errorMessage' Lens
errorMessageL :: Lens_' Error Text
errorMessageL f Error{..} = (\message -> Error { message, ..} ) <$> f message
{-# INLINE errorMessageL #-}

-- * GameFinished

-- | 'gameFinishedGameId' Lens
gameFinishedGameIdL :: Lens_' GameFinishedBody Text
gameFinishedGameIdL f GameFinishedBody{..} = (\gameId -> GameFinishedBody { gameId, ..} ) <$> f gameId
{-# INLINE gameFinishedGameIdL #-}

-- | 'gameFinishedScore' Lens
gameFinishedScoreL :: Lens_' GameFinishedBody Text
gameFinishedScoreL f GameFinishedBody{..} = (\score -> GameFinishedBody { score, ..} ) <$> f score
{-# INLINE gameFinishedScoreL #-}

-- | 'gameFinishedGameResult' Lens
gameFinishedGameResultL :: Lens_' GameFinishedBody GameFinishedGameResult
gameFinishedGameResultL f GameFinishedBody{..} = (\gameResult -> GameFinishedBody { gameResult, ..} ) <$> f gameResult
{-# INLINE gameFinishedGameResultL #-}



-- * GameFinishedGameResult

-- | 'gameFinishedGameResultStatus' Lens
gameFinishedGameResultStatusL :: Lens_' GameFinishedGameResult EStatus
gameFinishedGameResultStatusL f GameFinishedGameResult{..} = (\status -> GameFinishedGameResult { status, ..} ) <$> f status
{-# INLINE gameFinishedGameResultStatusL #-}

-- | 'gameFinishedGameResultWinner' Lens
gameFinishedGameResultWinnerL :: Lens_' GameFinishedGameResult Text
gameFinishedGameResultWinnerL f GameFinishedGameResult{..} = (\winner -> GameFinishedGameResult { winner, ..} ) <$> f winner
{-# INLINE gameFinishedGameResultWinnerL #-}



-- * HelloRequest

-- | 'helloRequestGame' Lens
helloRequestGameL :: Lens_' HelloRequest HelloRequestGame
helloRequestGameL f HelloRequest{..} = (\game -> HelloRequest { game, ..} ) <$> f game
{-# INLINE helloRequestGameL #-}

-- | 'helloRequestPlayerName' Lens
helloRequestPlayerNameL :: Lens_' HelloRequest (Maybe Text)
helloRequestPlayerNameL f HelloRequest{..} = (\playerName -> HelloRequest { playerName, ..} ) <$> f playerName
{-# INLINE helloRequestPlayerNameL #-}

-- | 'helloRequestEventCallback' Lens
helloRequestEventCallbackL :: Lens_' HelloRequest Text
helloRequestEventCallbackL f HelloRequest{..} = (\eventCallback -> HelloRequest { eventCallback, ..} ) <$> f eventCallback
{-# INLINE helloRequestEventCallbackL #-}



-- * HelloRequestGame

-- | 'helloRequestGameName' Lens
helloRequestGameNameL :: Lens_' HelloRequestGame GameName
helloRequestGameNameL f HelloRequestGame{..} = (\name -> HelloRequestGame { name, ..} ) <$> f name
{-# INLINE helloRequestGameNameL #-}

-- | 'helloRequestGameConnectionToken' Lens
helloRequestGameConnectionTokenL :: Lens_' HelloRequestGame Text
helloRequestGameConnectionTokenL f HelloRequestGame{..} = (\connectionToken -> HelloRequestGame { connectionToken, ..} ) <$> f connectionToken
{-# INLINE helloRequestGameConnectionTokenL #-}

-- | 'helloRequestGameNumberOfTotalPlayers' Lens
helloRequestGameNumberOfTotalPlayersL :: Lens_' HelloRequestGame (Maybe Int)
helloRequestGameNumberOfTotalPlayersL f HelloRequestGame{..} = (\numberOfTotalPlayers -> HelloRequestGame { numberOfTotalPlayers, ..} ) <$> f numberOfTotalPlayers
{-# INLINE helloRequestGameNumberOfTotalPlayersL #-}



-- * HelloResponse

-- | 'helloResponseGameId' Lens
helloResponseGameIdL :: Lens_' HelloResponse Text
helloResponseGameIdL f HelloResponse{..} = (\gameId -> HelloResponse { gameId, ..} ) <$> f gameId
{-# INLINE helloResponseGameIdL #-}

-- | 'helloResponsePlayer' Lens
helloResponsePlayerL :: Lens_' HelloResponse HelloResponsePlayer
helloResponsePlayerL f HelloResponse{..} = (\player -> HelloResponse { player, ..} ) <$> f player
{-# INLINE helloResponsePlayerL #-}

-- | 'helloResponseRounds' Lens
helloResponseRoundsL :: Lens_' HelloResponse Int
helloResponseRoundsL f HelloResponse{..} = (\rounds -> HelloResponse { rounds, ..} ) <$> f rounds
{-# INLINE helloResponseRoundsL #-}



-- * HelloResponsePlayer

-- | 'helloResponsePlayerId' Lens
helloResponsePlayerIdL :: Lens_' HelloResponsePlayer Text
helloResponsePlayerIdL f HelloResponsePlayer{..} = (\id -> HelloResponsePlayer { id, ..} ) <$> f id
{-# INLINE helloResponsePlayerIdL #-}

-- | 'helloResponsePlayerName' Lens
helloResponsePlayerNameL :: Lens_' HelloResponsePlayer Text
helloResponsePlayerNameL f HelloResponsePlayer{..} = (\name -> HelloResponsePlayer { name, ..} ) <$> f name
{-# INLINE helloResponsePlayerNameL #-}

-- * PlayRequest

-- | 'playRequestGameId' Lens
playRequestGameIdL :: Lens_' PlayRequest Text
playRequestGameIdL f PlayRequest{..} = (\gameId -> PlayRequest { gameId, ..} ) <$> f gameId
{-# INLINE playRequestGameIdL #-}

-- | 'playRequestPlayerId' Lens
playRequestPlayerIdL :: Lens_' PlayRequest Text
playRequestPlayerIdL f PlayRequest{..} = (\playerId -> PlayRequest { playerId, ..} ) <$> f playerId
{-# INLINE playRequestPlayerIdL #-}

-- | 'playRequestRound' Lens
playRequestRoundL :: Lens_' PlayRequest Int
playRequestRoundL f PlayRequest{..} = (\round -> PlayRequest { round, ..} ) <$> f round
{-# INLINE playRequestRoundL #-}

-- | 'playRequestMove' Lens
playRequestMoveL :: Lens_' PlayRequest Move
playRequestMoveL f PlayRequest{..} = (\move -> PlayRequest { move, ..} ) <$> f move
{-# INLINE playRequestMoveL #-}

-- * PlayResponse

-- | 'playResponseRound' Lens
playResponseRoundL :: Lens_' PlayResponse Int
playResponseRoundL f PlayResponse{..} = (\round -> PlayResponse { round, ..} ) <$> f round
{-# INLINE playResponseRoundL #-}

-- | 'playResponsePlayersYetToMakeMove' Lens
playResponsePlayersYetToMakeMoveL :: Lens_' PlayResponse [Text]
playResponsePlayersYetToMakeMoveL f PlayResponse{..} = (\playersYetToMakeMove -> PlayResponse { playersYetToMakeMove, ..} ) <$> f playersYetToMakeMove
{-# INLINE playResponsePlayersYetToMakeMoveL #-}



-- * RockPaperScissorsMove

-- | 'rockPaperScissorsMoveValue' Lens
rockPaperScissorsMoveValueL :: Lens_' RockPaperScissorsMove EValue
rockPaperScissorsMoveValueL f RockPaperScissorsMove{..} = (\value -> RockPaperScissorsMove { value, ..} ) <$> f value
{-# INLINE rockPaperScissorsMoveValueL #-}



-- * RoundFinished

-- | 'roundFinishedGameId' Lens
roundFinishedGameIdL :: Lens_' RoundFinishedBody Text
roundFinishedGameIdL f RoundFinishedBody{..} = (\gameId -> RoundFinishedBody { gameId, ..} ) <$> f gameId
{-# INLINE roundFinishedGameIdL #-}

-- | 'roundFinishedCurrentRound' Lens
roundFinishedCurrentRoundL :: Lens_' RoundFinishedBody Int
roundFinishedCurrentRoundL f RoundFinishedBody{..} = (\currentRound -> RoundFinishedBody { currentRound, ..} ) <$> f currentRound
{-# INLINE roundFinishedCurrentRoundL #-}

-- | 'roundFinishedRoundResult' Lens
roundFinishedRoundResultL :: Lens_' RoundFinishedBody RoundFinishedRoundResult
roundFinishedRoundResultL f RoundFinishedBody{..} = (\roundResult -> RoundFinishedBody { roundResult, ..} ) <$> f roundResult
{-# INLINE roundFinishedRoundResultL #-}

-- | 'roundFinishedNextRound' Lens
roundFinishedNextRoundL :: Lens_' RoundFinishedBody Int
roundFinishedNextRoundL f RoundFinishedBody{..} = (\nextRound -> RoundFinishedBody { nextRound, ..} ) <$> f nextRound
{-# INLINE roundFinishedNextRoundL #-}

-- | 'roundFinishedScore' Lens
roundFinishedScoreL :: Lens_' RoundFinishedBody Text
roundFinishedScoreL f RoundFinishedBody{..} = (\score -> RoundFinishedBody { score, ..} ) <$> f score
{-# INLINE roundFinishedScoreL #-}



-- * RoundFinishedRoundResult

-- | 'roundFinishedRoundResultStatus' Lens
roundFinishedRoundResultStatusL :: Lens_' RoundFinishedRoundResult EStatus
roundFinishedRoundResultStatusL f RoundFinishedRoundResult{..} = (\status -> RoundFinishedRoundResult { status, ..} ) <$> f status
{-# INLINE roundFinishedRoundResultStatusL #-}

-- | 'roundFinishedRoundResultWinner' Lens
roundFinishedRoundResultWinnerL :: Lens_' RoundFinishedRoundResult (Maybe Text)
roundFinishedRoundResultWinnerL f RoundFinishedRoundResult{..} = (\winner -> RoundFinishedRoundResult { winner, ..} ) <$> f winner
{-# INLINE roundFinishedRoundResultWinnerL #-}



-- * StartGame

-- | 'startGameGameId' Lens
startGameGameIdL :: Lens_' StartGameBody Text
startGameGameIdL f StartGameBody{..} = (\gameId -> StartGameBody { gameId, ..} ) <$> f gameId
{-# INLINE startGameGameIdL #-}

-- | 'startGamePlayers' Lens
startGamePlayersL :: Lens_' StartGameBody [Text]
startGamePlayersL f StartGameBody{..} = (\players -> StartGameBody { players, ..} ) <$> f players
{-# INLINE startGamePlayersL #-}

-- | 'startGameNextRound' Lens
startGameNextRoundL :: Lens_' StartGameBody Int
startGameNextRoundL f StartGameBody{..} = (\nextRound -> StartGameBody { nextRound, ..} ) <$> f nextRound
{-# INLINE startGameNextRoundL #-}


