{-
   Bot Server API

   This is a bot API to let bots battle

   OpenAPI Version: 3.0.0
   Bot Server API API version: 1.0.0
   Contact: szederjesiarnold@gmail.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : BotServer
-}
{-# LANGUAGE OverloadedLabels #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}

module BotServer
  ( module BotServer.API
  , module BotServer.Client
  , module BotServer.Core
  , module BotServer.Logging
  , module BotServer.MimeTypes
  , module BotServer.Model
  , module BotServer.ModelLens
  , playWithStrategy
  , ConnectionConfig (..)
  , MutableState
  , Strategy
  ) where

import BotServer.API
import BotServer.Client
import BotServer.Core
import BotServer.Logging
import BotServer.MimeTypes
import BotServer.Model
import BotServer.ModelLens
import BotClientState
import EventHandler
import Prelude
import Data.Text(Text)
import Network.HTTP.Client(newManager, defaultManagerSettings)
import qualified Data.Text.Lazy as L

data ConnectionConfig = ConnectionConfig {
  token :: Text
  , clientPort :: Int
  , serverAddress :: String
}

playWithStrategy :: GameName -> Text -> Strategy -> ConnectionConfig -> IO ()
playWithStrategy gameName playerName strategy ConnectionConfig {token, clientPort, serverAddress} = do
  mgr <- newManager defaultManagerSettings
  config <- withStdoutLogging =<< newConfig (L.pack serverAddress)
  helloEither <- connect mgr config gameName playerName (EventHandler.eventCallback clientPort) token
  let connectEither = fmap (\
                          HelloResponse{gameId, player = HelloResponsePlayer{id = playerId, name}} -> 
                            GameConfig{gameId = gameId, playerId = playerId, playerName = name}
                        ) helloEither
  case connectEither of
      Left msg -> print msg
      Right gameConfig -> runEventServer gameConfig strategy mgr config clientPort