{-
   Bot Server API

   This is a bot API to let bots battle

   OpenAPI Version: 3.0.0
   Bot Server API API version: 1.0.0
   Contact: szederjesiarnold@gmail.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : BotServer
-}
{-# LANGUAGE OverloadedLabels #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}

module BotServer
  ( module BotServer.API
  , module BotServer.Client
  , module BotServer.Core
  , module BotServer.Logging
  , module BotServer.MimeTypes
  , module BotServer.Model
  , playWithStrategy
  , ConnectionConfig (..)
  , MutableState (..)
  , BotServer.GameConfig (..)
  , PlayerConfig (..)
  , ConnectionType (..)
  , Strategy
  ) where

import BotServer.API
import BotServer.Client
import BotServer.Core
import BotServer.Logging
import BotServer.MimeTypes
import BotServer.Model
import BotClientState
import EventHandlers
import Prelude
import Data.Text(Text)
import Network.HTTP.Client(newManager, defaultManagerSettings)
import qualified Data.Text.Lazy as L

data ConnectionConfig = ConnectionConfig {
  token :: Text
  , serverAddress :: String
  , connectionType :: ConnectionType
}

data ConnectionType = WS | HTTP { eventCallback :: Text, clientPort :: Int }

data GameConfig = GameConfig {
  name :: GameName
  , totalRounds :: Maybe Int
}

data PlayerConfig = PlayerConfig {
  playerName :: Text
  , strategy :: Strategy
}

playWithStrategy :: BotServer.GameConfig -> PlayerConfig -> ConnectionConfig -> IO ()
playWithStrategy BotServer.GameConfig{name, totalRounds} PlayerConfig{playerName, strategy} ConnectionConfig {token, serverAddress, connectionType} = do
  mgr <- newManager defaultManagerSettings
  config <- withStdoutLogging =<< newConfig (L.pack serverAddress)
  helloEither <- connect mgr config name totalRounds playerName (getEventCallback connectionType) token
  let connectEither = fmap (\
                          HelloResponse{gameId, player = HelloResponsePlayer{id = playerId, name}} -> 
                            EventHandlers.GameConfig{gameId = gameId, playerId = playerId, playerName = name}
                        ) helloEither
  case connectEither of
      Left msg -> print msg
      Right gameConfig -> 
        case connectionType of
          HTTP {clientPort} -> runHTTPEventServer gameConfig strategy mgr config clientPort
          WS -> runWSEventServer gameConfig strategy mgr config

getEventCallback :: ConnectionType -> Maybe Text
getEventCallback WS = Nothing
getEventCallback HTTP {eventCallback} = Just eventCallback